# do onstart/onexit things
sample_schemas = ['sample', 'assembly', 'replicate', 'condition', 'strandedness']
config_schemas = ['general', 'download', 'alignment_general', 'peakcalling', 'trackhub']
include: "../../rules/configuration_generic.smk"


# load all the relevant rules
include: f"{config['rule_dir']}/alignment.smk"
include: f"{config['rule_dir']}/bam_cleaning.smk"
include: f"{config['rule_dir']}/bigfiles.smk"
include: f"{config['rule_dir']}/get_genome.smk"
include: f"{config['rule_dir']}/get_fastq.smk"
include: f"{config['rule_dir']}/merge_replicates.smk"
include: f"{config['rule_dir']}/peak_counts.smk"
include: f"{config['rule_dir']}/peak_calling.smk"
include: f"{config['rule_dir']}/qc.smk"
include: f"{config['rule_dir']}/trackhub.smk"
include: f"{config['rule_dir']}/trimming.smk"


# set the quality_control functions
quality_control = [get_trimming_qc, get_alignment_qc, get_peak_calling_qc]


rule call_peaks_all:
    """
    call peaks for each sample (or condition if applies)
    """
    input:
        expand((["{result_dir}/trackhub"] if config['create_trackhub'] else []) +
               (["{qc_dir}/multiqc_{assemblies}.html"] if config["create_qc_report"] else []),
                **{**config,
                   **{'assemblies': set(samples['assembly']), 'peak_caller': config['peak_caller'].keys()}})
        + count_table_output()
