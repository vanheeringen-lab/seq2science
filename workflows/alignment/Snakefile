# complement the configuration
configfile: "config.yaml"


# do onstart/onexit things
sample_schemas = ['sample', 'assembly', 'strandedness']
config_schemas = ['general', 'download', 'alignment_general', 'alignment_specific']
include: "../../rules/configuration.smk"


# load the remaining relevant rules
include: f"{config['rule_dir']}/alignment.smk"
include: f"{config['rule_dir']}/get_genome.smk"
include: f"{config['rule_dir']}/get_fastq.smk"
include: f"{config['rule_dir']}/merge_replicates.smk"
include: f"{config['rule_dir']}/qc.smk"
include: f"{config['rule_dir']}/trimming.smk"


# load the quality control files
quality_control = [get_trimming_qc, get_alignment_qc]

def get_bams():
    bamfiles = {}
    bamfiles['bams'] = []; bamfiles['bais'] = []

    # get all the bams
    if config.get('combine_replicates', '') == 'merge' and 'condition' in samples:
        for condition in set(samples['condition']):
            for assembly in set(samples[samples['condition'] == condition]['assembly']):
                bamfiles['bams'].extend(expand(f"{{dedup_dir}}/{assembly}-{condition}.{{bam_sorter}}-{{bam_sort_order}}.bam", **config))
                if config['bam_sort_order'] == 'coordinate':
                    bamfiles['bais'].extend(expand(f"{{dedup_dir}}/{assembly}-{condition}.{{bam_sorter}}-{{bam_sort_order}}.bam.bai", **config))
    else:
        bamfiles['bams'] = [expand(f"{{dedup_dir}}/{samples.loc[sample]['assembly']}-{sample}.{{bam_sorter}}-{{bam_sort_order}}.bam", **config) for sample in samples.index]
        bamfiles['bais'] = [expand(f"{{dedup_dir}}/{samples.loc[sample]['assembly']}-{sample}.{{bam_sorter}}-{{bam_sort_order}}.bam.bai", **config) for sample in samples.index if config['bam_sort_order'] == 'coordinate']

    return bamfiles

rule align_all:
    """
    align each sample against its assembly
    """
    input:
         get_bams()['bams'],
         get_bams()['bais'],
         expand("{qc_dir}/multiqc_{assemblies}.html", **{**config, **{'assemblies': set(samples['assembly'])}})
