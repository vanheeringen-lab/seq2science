# complement the configuration
configfile: "config.yaml"


# do onstart/onexit things
sample_schemas = ['sample', 'assembly', 'strandedness']
config_schemas = ['general', 'download', 'alignment_general', 'alignment_specific', 'trackhub']
include: "../../rules/configuration.smk"


# load the remaining relevant rules
include: f"{config['rule_dir']}/alignment.smk"
include: f"{config['rule_dir']}/get_genome.smk"
include: f"{config['rule_dir']}/get_fastq.smk"
include: f"{config['rule_dir']}/merge_replicates.smk"
include: f"{config['rule_dir']}/trackhub.smk"
include: f"{config['rule_dir']}/qc.smk"
include: f"{config['rule_dir']}/trimming.smk"


# load the quality control files
quality_control = [get_trimming_qc, get_alignment_qc]

def get_bams():
    bamfiles = {}
    bamfiles['bams'] = set(); bamfiles['bais'] = set()

    # get all the bams
    if config.get('combine_replicates', '') == 'merge' and 'condition' in samples:
        for condition in set(samples['condition']):
            for assembly in set(samples[samples['condition'] == condition]['assembly']):
                bamfiles['bams'].update([expand(f"{{dedup_dir}}/{assembly}-{condition}.{{bam_sorter}}-{{bam_sort_order}}.bam", **config)[0]])
                bamfiles['bais'].update([expand(f"{{dedup_dir}}/{assembly}-{condition}.{{bam_sorter}}-{{bam_sort_order}}.bam.bai", **config)[0]])
                # always output samtools-coordinate
                bamfiles['bams'].update([expand(f"{{dedup_dir}}/{assembly}-{condition}.samtools-coordinate.bam", **config)[0]])
                bamfiles['bais'].update([expand(f"{{dedup_dir}}/{assembly}-{condition}.samtools-coordinate.bam.bai", **config)[0]])
    else:
        bamfiles['bams'].update([expand(f"{{dedup_dir}}/{samples.loc[sample]['assembly']}-{sample}.{{bam_sorter}}-{{bam_sort_order}}.bam", **config)[0] for sample in samples.index])
        bamfiles['bais'].update([expand(f"{{dedup_dir}}/{samples.loc[sample]['assembly']}-{sample}.{{bam_sorter}}-{{bam_sort_order}}.bam.bai", **config)[0] for sample in samples.index if config['bam_sort_order'] == 'coordinate'])
        # always output samtools-coordinate
        bamfiles['bams'].update([expand(f"{{dedup_dir}}/{samples.loc[sample]['assembly']}-{sample}.samtools-coordinate.bam", **config)[0] for sample in samples.index])
        bamfiles['bais'].update([expand(f"{{dedup_dir}}/{samples.loc[sample]['assembly']}-{sample}.samtools-coordinate.bam.bai", **config)[0] for sample in samples.index if config['bam_sort_order'] == 'coordinate'])

    return bamfiles

rule align_all:
    """
    align each sample against its assembly
    """
    input:
         get_bams()['bams'] if not config['create_trackhub'] else [],
         get_bams()['bais'] if not config['create_trackhub'] else [],
         expand("{qc_dir}/multiqc_{assemblies}.html", **{**config, **{'assemblies': set(samples['assembly'])}}),
         [expand("{result_dir}/trackhub", **config)] if config['create_trackhub'] else []
