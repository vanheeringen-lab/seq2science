import io.jenkins.blueocean.rest.impl.pipeline.PipelineNodeGraphVisitor
import io.jenkins.blueocean.rest.impl.pipeline.FlowNodeWrapper
import org.jenkinsci.plugins.workflow.flow.FlowExecution
import org.jenkinsci.plugins.workflow.graph.FlowNode
import org.jenkinsci.plugins.workflow.job.WorkflowRun


// // helper function to check whether a stage failed
// @NonCPS
// List getFailedStages(WorkflowRun run) {
//     List failedStages = []
//     FlowExecution exec = run.getExecution()
//     PipelineNodeGraphVisitor visitor = new PipelineNodeGraphVisitor(run)
//     def flowNodes = visitor.getPipelineNodes()
//
//     for (node in flowNodes) {
//         if (node.getType() != FlowNodeWrapper.NodeType.STAGE ) { continue; }
//         String nodeName = node.getDisplayName()
//         def nodeResult = node.getStatus().getResult()
//         def resultSuccess = io.jenkins.blueocean.rest.model.BlueRun$BlueRunResult.SUCCESS
//         if (nodeResult != resultSuccess) {
//             failedStages.add(nodeName)
//         }
//     }
//     return failedStages
// }


pipeline {
    agent any

    environment {
        PATH = "$WORKSPACE/miniconda/bin:$PATH"
        CORES = "28"
    }

    stages {
        stage('Setup Miniconda') {
            steps {
                sh '''#!/usr/bin/env bash
                wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
                bash miniconda.sh -b -p $WORKSPACE/miniconda
                conda config --set always_yes yes --set changeps1 false
                # conda update -q conda
                # conda update -n base -c defaults conda
                
                # add channels
                # conda config --add channels defaults    > /dev/null
                # conda config --add channels conda-forge > /dev/null
                # conda config --add channels bioconda    > /dev/null

                # create main env
                conda env create -f requirements.yaml
                '''
            }
        }

        stage('Test DAG') {
            steps {
                parallel (
                    "1 Download & align" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate s2s

                        ./tests/dag_tests.sh alignment
                        '''
                    },
                    "2 ATAC- & ChIP-seq" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate s2s

                        ./tests/dag_tests.sh atac-seq
                        '''
                    },
                    "3 RNA-seq" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate s2s

                        ./tests/dag_tests.sh rna-seq
                        '''
                    },
                    "4 scATAC-seq" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate s2s

                        ./tests/dag_tests.sh scatac-seq
                        '''
                    }
                )
            }
        }


        stage('Test downloading') {
//             when {
//                 anyOf {
//                     // always fully build develop and master
//                     branch 'master'
//                     branch 'develop'
//
//                     // always run when jenkins, envs or configuration is changed
//                     changeset glob: 'Jenkins/*'
//                     changeset glob: 'envs/*'
//                     changeset 'rules/configuration.smk'
//
//                     // run when relevant rules are changed
//                     changeset glob: 'seq2science/workflows/download_fastq/*'
//                     changeset 'rules/get_fastq.smk'
//
//                     // run when last time you failed
//                     expression {
//                         return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
//                         .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test downloading")
//                     }
//                 }
//             }
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-seq2science/workflows/

                ./tests/run_tests.sh download
                '''
            }
        }


        stage('Setup alignment') {
//             when {
//                 anyOf {
//                     // always fully build develop and master
//                     branch 'master'
//                     branch 'develop'
//
//                     // always run when jenkins, envs or configuration is changed
//                     changeset glob: 'Jenkins/*'
//                     changeset glob: 'envs/*'
//                     changeset 'rules/configuration.smk'
//
//                     // run when relevant rules are changed
//                     changeset glob: 'seq2science/workflows/alignment/*'
//                     changeset 'rules/alignment.smk'
//                     changeset 'rules/trimming.smk'
//                     changeset 'rules/qc.smk'
//
//                     // run when last time you failed
//                     expression {
//                         return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
//                         .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test alignment")
//                     }
//                 }
//             }
            steps {
                sh '''#!/usr/bin/env bash
                set -e

                # set up parallel alignment environments
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-seq2science/workflows/

                ./tests/run_tests.sh prep-align
                '''
            }
        }


        stage('Test alignment') {
//             when {
//                 anyOf {
//                     // always fully build develop and master
//                     branch 'master'
//                     branch 'develop'
//
//                     // always run when jenkins, envs or configuration is changed
//                     changeset glob: 'Jenkins/*'
//                     changeset glob: 'envs/*'
//                     changeset 'rules/configuration.smk'
//
//                     // run when relevant rules are changed
//                     changeset glob: 'seq2science/workflows/alignment/*'
//                     changeset 'rules/alignment.smk'
//                     changeset 'rules/trimming.smk'
//                     changeset 'rules/qc.smk'
//
//                     // run when last time you failed
//                     expression {
//                         return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
//                         .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test alignment")
//                     }
//                 }
//             }
            steps {
                parallel (
                    "Bowtie2" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-seq2science/workflows/

                        ./tests/run_tests.sh bowtie2
                        '''
                    },
                    "BWA" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-seq2science/workflows/

                        ./tests/run_tests.sh bwa
                        '''
                    },
                    "HISAT2" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-seq2science/workflows/

                        ./tests/run_tests.sh hisat2
                        '''
                    },
                    "STAR" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-seq2science/workflows/

                        ./tests/run_tests.sh star
                        '''
                    }
                )
            }
        }


        stage('Test atac-seq') {
//             when {
//                 anyOf {
//                     // always fully build develop and master
//                     branch 'master'
//                     branch 'develop'
//
//                     // always run when jenkins, envs or configuration is changed
//                     changeset glob: 'Jenkins/*'
//                     changeset glob: 'envs/*'
//                     changeset 'rules/configuration.smk'
//
//                     // run when relevant rules are changed
//                     changeset glob: 'seq2science/workflows/atac_seq/*'
//                     changeset 'rules/alignment.smk'
//                     changeset 'rules/trimming.smk'
//                     changeset 'rules/qc.smk'
//                     changeset 'rules/merge_replicates.smk'
//                     changeset 'rules/trackhub.smk'
//                     changeset 'rules/call_peak.smk'
//                     changeset 'rules/get_genome.smk'
//
//                     // run when last time you failed
//                     expression {
//                         return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
//                         .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test atac-seq")
//                     }
//                 }
//             }
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-seq2science/workflows/

                ./tests/run_tests.sh atac-seq
                '''
            }
        }

        stage('Test scatac-seq') {
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-seq2science/workflows/

                ./tests/run_tests.sh scatac-seq
                '''
            }
        }


        stage('Test rna-seq') {
//             when {
//                 anyOf {
//                     // always fully build develop and master
//                     branch 'master'
//                     branch 'develop'
//
//                     // always run when jenkins, envs or configuration is changed
//                     changeset glob: 'Jenkins/*'
//                     changeset glob: 'envs/*'
//                     changeset 'rules/configuration.smk'
//
//                     // run when relevant rules are changed
//                     changeset glob: 'seq2science/workflows/rna_seq/*'
//                     changeset 'rules/get_genome.smk'
//                     changeset 'rules/trimming.smk'
//                     changeset 'rules/alignment.smk'
//                     changeset 'rules/quantification.smk'
//                     changeset 'rules/gene_counts.smk'
//                     changeset 'rules/DGE_analysis.smk'
//                     changeset 'rules/qc.smk'
//                     changeset 'rules/trackhub.smk'
//
//                     // run when last time you failed
//                     expression {
//                         return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
//                         .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test rna-seq")
//                     }
//                 }
//             }
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-seq2science/workflows/

                ./tests/run_tests.sh rna-seq
                '''
            }
        }

        stage('Code Style') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''#!/usr/bin/env bash
                    set -e
                    source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                    conda activate miniconda/envs/snakemake-seq2science/workflows/
                    conda install -q --yes flake8

                    # flake8
                    printf "\nflake8\n\n"
                    flake8

                    # linting
                    printf "\nlinting\n\n"
                    snakemake -s seq2science/workflows/atac_seq/Snakefile --directory seq2science/workflows/atac_seq --lint
                    snakemake -s seq2science/workflows/rna_seq/Snakefile  --directory seq2science/workflows/rna_seq --lint
                    '''
                }
            }
       }
    }


    post {
        always {
            dir("$WORKSPACE") {
                deleteDir()
            }
        }
    }
}
