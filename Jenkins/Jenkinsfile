import io.jenkins.blueocean.rest.impl.pipeline.PipelineNodeGraphVisitor
import io.jenkins.blueocean.rest.impl.pipeline.FlowNodeWrapper
import org.jenkinsci.plugins.workflow.flow.FlowExecution
import org.jenkinsci.plugins.workflow.graph.FlowNode
import org.jenkinsci.plugins.workflow.job.WorkflowRun


// // helper function to check whether a stage failed
// @NonCPS
// List getFailedStages(WorkflowRun run) {
//     List failedStages = []
//     FlowExecution exec = run.getExecution()
//     PipelineNodeGraphVisitor visitor = new PipelineNodeGraphVisitor(run)
//     def flowNodes = visitor.getPipelineNodes()
//
//     for (node in flowNodes) {
//         if (node.getType() != FlowNodeWrapper.NodeType.STAGE ) { continue; }
//         String nodeName = node.getDisplayName()
//         def nodeResult = node.getStatus().getResult()
//         def resultSuccess = io.jenkins.blueocean.rest.model.BlueRun$BlueRunResult.SUCCESS
//         if (nodeResult != resultSuccess) {
//             failedStages.add(nodeName)
//         }
//     }
//     return failedStages
// }


pipeline {
    agent any

    environment {
        PATH = "$WORKSPACE/miniconda/bin:$PATH"
        CORES = "28"
    }

    stages {
        stage('Setup Miniconda') {
            steps {
                sh '''#!/usr/bin/env bash
                wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -nv -O miniconda.sh > /dev/null
                bash miniconda.sh -b -p $WORKSPACE/miniconda > /dev/null
                conda config --set always_yes yes --set changeps1 no > /dev/null
                conda update -q conda  > /dev/null

                # add channels
                conda config --add channels defaults    > /dev/null
                conda config --add channels conda-forge > /dev/null
                conda config --add channels bioconda    > /dev/null

                # create snakemake-workflows env
                conda env create -f envs/snakemake-workflows.yaml > /dev/null
                '''
            }
        }

        stage('Code Style') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''#!/usr/bin/env bash
                    set -e
                    source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                    conda activate miniconda/envs/snakemake-workflows/
                    conda install -q --yes flake8

                    # flake8
                    printf "\nflake8\n\n"
                    flake8

                    # linting
                    printf "\nlinting\n\n"
                    snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq --lint
                    snakemake -s workflows/rna_seq/Snakefile  --directory workflows/rna_seq --lint
                    '''
                }
            }
       }
                

        stage('Test DAG') {
            steps {
                parallel (
                    "1 Download & align" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-workflows/

                        # Do some dry runs to test the DAG
                        # test download workflow
                        printf "\ndownload default\n\n"
                        snakemake -s workflows/download_fastq/Snakefile --directory workflows/download_fastq -n -j 48 --quiet

                        # test alignment workflow
                        # default config
                        printf "\nalignment default\n\n"
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --quiet

                        # test aligners
                        printf "\ntesting aligners\n\n"
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/bowtie2.yaml --config samples=../../Jenkins/alignment/local_sample.tsv --quiet
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/bwa.yaml     --config samples=../../Jenkins/alignment/local_sample.tsv --quiet
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/hisat2.yaml  --config samples=../../Jenkins/alignment/local_sample.tsv --quiet
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/star.yaml    --config samples=../../Jenkins/alignment/local_sample.tsv --quiet

                        # test sorting
                        printf "\ntesting sorting\n\n"
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/samtools_coordinate.yaml --quiet
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/samtools_queryname.yaml  --quiet
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/sambamba_coordinate.yaml --quiet
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/sambamba_queryname.yaml  --quiet

                        # test alignmentsieve
                        printf "\ntest alignmentsieve\n\n"
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/alignmentsieve.yaml --quiet
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/no_alignmentsieve.yaml --quiet

                        # test cram support
                        printf "\ntest cram support\n\n"
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/cram_no_bam.yaml --quiet
                        '''
                    },
                    "2 ATAC-seq" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-workflows/

                        # test atac-seq workflow
                        # default config
                        printf "\ndefault atac-seq\n\n"
                        snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --config --quiet

                        # test different peak callers
                        printf "\natac peakcaller\n\n"
                        snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --configfile Jenkins/atac_seq/genrich.yaml       --quiet
                        snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --configfile Jenkins/atac_seq/macs2.yaml         --quiet
                        snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --configfile Jenkins/atac_seq/genrich_macs2.yaml --quiet

                        # test different replicate settings
                        printf "\natac combine replicates\n\n"
                        snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --config combine_replicates=fisher samples=../../Jenkins/atac_seq/samples.tsv --quiet
                        snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --config combine_replicates=idr    samples=../../Jenkins/atac_seq/samples.tsv --quiet
                        snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --config combine_replicates=merge  samples=../../Jenkins/atac_seq/samples.tsv --quiet
                        '''
                    },
                    "3 RNA-seq" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-workflows/

                        # test rna-seq workflow
                        # default config
                        printf "\ndefault rna-seq\n\n"
                        snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq -n -j 48 --quiet
                        snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq -n -j 48 --config quantifier=salmon decoy_aware_index=True --quiet

                        # test differential expression analysis
                        printf "\ndifferential expression\n\n"
                        snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq -n -j 48 --configfile Jenkins/rna_seq/deseq2.yaml --config samples=../../Jenkins/rna_seq/samples.tsv quantifier=star   --quiet
                        snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq -n -j 48 --configfile Jenkins/rna_seq/deseq2.yaml --config samples=../../Jenkins/rna_seq/samples.tsv quantifier=salmon --quiet

                        # test trackhub generation
                        printf "\ntrackhub\n\n"
                        snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq -n -j 48 --configfile Jenkins/rna_seq/counts.yaml --config samples=../../Jenkins/alignment/local_sample.tsv quantifier=star   create_trackhub=True --quiet
                        snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq -n -j 48 --configfile Jenkins/rna_seq/counts.yaml --config samples=../../Jenkins/alignment/local_sample.tsv quantifier=salmon create_trackhub=True --quiet
                        '''
                    }
                )
            }
        }


        stage('Test downloading') {
//             when {
//                 anyOf {
//                     // always fully build develop and master
//                     branch 'master'
//                     branch 'develop'
//
//                     // always run when jenkins, envs or configuration is changed
//                     changeset glob: 'Jenkins/*'
//                     changeset glob: 'envs/*'
//                     changeset 'rules/configuration.smk'
//
//                     // run when relevant rules are changed
//                     changeset glob: 'workflows/download_fastq/*'
//                     changeset 'rules/get_fastq.smk'
//
//                     // run when last time you failed
//                     expression {
//                         return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
//                         .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test downloading")
//                     }
//                 }
//             }
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                # test basic downloading 1 PE and 1 SE
                printf "\ndownload SE and PE fastqs\n\n"
                snakemake -s workflows/download_fastq/Snakefile --directory workflows/download_fastq \
                --use-conda -j $CORES --config samples=../../Jenkins/download_fastq/samples.tsv \

                # test genome & annotation downloading
                printf "\ndownload genome & annotation\n\n"
                snakemake -s workflows/alignment/Snakefile --directory workflows/download_fastq \
                --use-conda -j $CORES --config samples=../../Jenkins/alignment/remote_sample.tsv \
                --configfile Jenkins/download_fastq/genome.yaml \
                -O id2sra sra2fastq_SE sra2fastq_PE fastqc trim_galore_PE get_annotation

                # note: workflows/download_fastq now contains the (PE) fastq and genome from Jenkins/alignment/remote_sample.tsv
                '''
            }
        }


        stage('Setup alignment') {
//             when {
//                 anyOf {
//                     // always fully build develop and master
//                     branch 'master'
//                     branch 'develop'
//
//                     // always run when jenkins, envs or configuration is changed
//                     changeset glob: 'Jenkins/*'
//                     changeset glob: 'envs/*'
//                     changeset 'rules/configuration.smk'
//
//                     // run when relevant rules are changed
//                     changeset glob: 'workflows/alignment/*'
//                     changeset 'rules/alignment.smk'
//                     changeset 'rules/trimming.smk'
//                     changeset 'rules/qc.smk'
//
//                     // run when last time you failed
//                     expression {
//                         return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
//                         .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test alignment")
//                     }
//                 }
//             }
            steps {
                sh '''#!/usr/bin/env bash
                set -e

                # set up parallel alignment environments
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                --use-conda -j $CORES --configfile Jenkins/alignment/bowtie2.yaml \
                --config samples=../../Jenkins/alignment/local_sample.tsv \
                --conda-create-envs-only

                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                --use-conda -j $CORES --configfile Jenkins/alignment/bwa.yaml \
                --config samples=../../Jenkins/alignment/local_sample.tsv \
                --conda-create-envs-only

                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                --use-conda -j $CORES --configfile Jenkins/alignment/hisat2.yaml \
                --config samples=../../Jenkins/alignment/local_sample.tsv \
                --conda-create-envs-only

                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                --use-conda -j $CORES --configfile Jenkins/alignment/star.yaml \
                --config samples=../../Jenkins/alignment/local_sample.tsv \
                --conda-create-envs-only
                '''
            }
        }


        stage('Test alignment') {
//             when {
//                 anyOf {
//                     // always fully build develop and master
//                     branch 'master'
//                     branch 'develop'
//
//                     // always run when jenkins, envs or configuration is changed
//                     changeset glob: 'Jenkins/*'
//                     changeset glob: 'envs/*'
//                     changeset 'rules/configuration.smk'
//
//                     // run when relevant rules are changed
//                     changeset glob: 'workflows/alignment/*'
//                     changeset 'rules/alignment.smk'
//                     changeset 'rules/trimming.smk'
//                     changeset 'rules/qc.smk'
//
//                     // run when last time you failed
//                     expression {
//                         return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
//                         .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test alignment")
//                     }
//                 }
//             }
            steps {
                parallel (
                    "Bowtie2" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-workflows/
                        let "c = $CORES / 4"
                        let "a = $c - 2"
                        let "s = 2"

                        # test bowtie2 alignment
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                        --use-conda --configfile Jenkins/alignment/bowtie2.yaml \
                        --config samples=../../Jenkins/alignment/local_sample.tsv \
                        -j $c --set-threads bowtie2_align=$a samtools_presort=$s \
                        --nolock --notemp
                        '''
                    },
                    "BWA" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-workflows/
                        let "c = $CORES / 4"
                        let "a = $c - 2"
                        let "s = 2"

                        # test bwa alignment
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                        --use-conda --configfile Jenkins/alignment/bwa.yaml \
                        --config samples=../../Jenkins/alignment/local_sample.tsv \
                        -j $c --set-threads bwa_mem=$a samtools_presort=$s \
                        --nolock --notemp
                        '''
                    },
                    "HISAT2" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-workflows/
                        let "c = $CORES / 4"
                        let "a = $c - 2"
                        let "s = 2"

                        # test hisat2 alignment
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                        --use-conda --configfile Jenkins/alignment/hisat2.yaml \
                        --config samples=../../Jenkins/alignment/local_sample.tsv \
                        -j $c --set-threads hisat2_align=$a samtools_presort=$s \
                        --nolock --notemp
                        '''
                    },
                    "STAR" : {
                        sh '''#!/usr/bin/env bash
                        set -e
                        source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                        conda activate miniconda/envs/snakemake-workflows/
                        let "c = $CORES / 4"
                        let "a = $c - 2"
                        let "s = 2"

                        # test star alignment
                        snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                        --use-conda --configfile Jenkins/alignment/star.yaml \
                        --config samples=../../Jenkins/alignment/local_sample.tsv \
                        -j $c --set-threads star_align=$a samtools_presort=$s \
                        --nolock --notemp
                        '''
                    }
                )
            }
        }


        stage('Test atac-seq') {
//             when {
//                 anyOf {
//                     // always fully build develop and master
//                     branch 'master'
//                     branch 'develop'
//
//                     // always run when jenkins, envs or configuration is changed
//                     changeset glob: 'Jenkins/*'
//                     changeset glob: 'envs/*'
//                     changeset 'rules/configuration.smk'
//
//                     // run when relevant rules are changed
//                     changeset glob: 'workflows/atac_seq/*'
//                     changeset 'rules/alignment.smk'
//                     changeset 'rules/trimming.smk'
//                     changeset 'rules/qc.smk'
//                     changeset 'rules/merge_replicates.smk'
//                     changeset 'rules/trackhub.smk'
//                     changeset 'rules/call_peak.smk'
//                     changeset 'rules/get_genome.smk'
//
//                     // run when last time you failed
//                     expression {
//                         return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
//                         .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test atac-seq")
//                     }
//                 }
//             }
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                # test simple
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq \
                --use-conda -j $CORES --configfile Jenkins/alignment/bowtie2.yaml \
                --config samples=../../Jenkins/alignment/remote_sample.tsv fastq_dir=../download_fastq/fastq genome_dir=../download_fastq

                # note: using the fastq and genome downloaded earlier. Tinydata doesn't work with rule featureCounts (would be even faster otherwise)
                '''
            }
        }


        stage('Test rna-seq') {
//             when {
//                 anyOf {
//                     // always fully build develop and master
//                     branch 'master'
//                     branch 'develop'
//
//                     // always run when jenkins, envs or configuration is changed
//                     changeset glob: 'Jenkins/*'
//                     changeset glob: 'envs/*'
//                     changeset 'rules/configuration.smk'
//
//                     // run when relevant rules are changed
//                     changeset glob: 'workflows/rna_seq/*'
//                     changeset 'rules/get_genome.smk'
//                     changeset 'rules/trimming.smk'
//                     changeset 'rules/alignment.smk'
//                     changeset 'rules/quantification.smk'
//                     changeset 'rules/gene_counts.smk'
//                     changeset 'rules/DGE_analysis.smk'
//                     changeset 'rules/qc.smk'
//                     changeset 'rules/trackhub.smk'
//
//                     // run when last time you failed
//                     expression {
//                         return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
//                         .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test rna-seq")
//                     }
//                 }
//             }
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                # test salmon
                printf "\nSalmon basic\n\n"
                # create regular counts
                snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq \
                --use-conda -j $CORES --configfile Jenkins/rna_seq/counts.yaml \
                --config samples=../../Jenkins/alignment/local_sample.tsv quantifier=salmon decoy_aware_index=False

                rm -rf Jenkins/tinydata/index/salmon
                rm -rf workflows/rna_seq/results/salmon workflows/rna_seq/results/gene_counts
                rm -rf workflows/rna_seq/results/deseq2 workflows/rna_seq/results/qc/multi*

                # create counts with a decoys-aware index (builds on last run)
                printf "\nSalmon decoy aware\n\n"
                snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq \
                --use-conda -j $CORES --configfile Jenkins/rna_seq/counts.yaml \
                --config samples=../../Jenkins/alignment/local_sample.tsv quantifier=salmon decoy_aware_index=True

                rm -rf workflows/rna_seq/results/gene_counts workflows/rna_seq/results/deseq2
                rm -rf workflows/rna_seq/results/qc/multi*


                # test STAR
                printf "\nSTAR counts\n\n"
                # create counts matrix (builds on last run)
                snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq \
                --use-conda -j $CORES --configfile Jenkins/rna_seq/counts.yaml \
                --config samples=../../Jenkins/rna_seq/samples.tsv

                # perform DGE (builds on last run)
                printf "\nSTAR DGE analysis\n\n"
                snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq \
                --use-conda -j $CORES --configfile Jenkins/rna_seq/deseq2.yaml \
                --config samples=../../Jenkins/rna_seq/samples.tsv

                # create trackhub (builds on last run)
                printf "\nSTAR trackhub\n\n"
                snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq \
                --use-conda -j $CORES --configfile Jenkins/rna_seq/counts.yaml \
                --config samples=../../Jenkins/alignment/local_sample.tsv create_trackhub=True
                '''
            }
        }
    }


    post {
        always {
            dir("$WORKSPACE") {
                deleteDir()
            }
        }
    }
}
