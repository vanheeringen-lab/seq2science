import io.jenkins.blueocean.rest.impl.pipeline.PipelineNodeGraphVisitor
import io.jenkins.blueocean.rest.impl.pipeline.FlowNodeWrapper
import org.jenkinsci.plugins.workflow.flow.FlowExecution
import org.jenkinsci.plugins.workflow.graph.FlowNode
import org.jenkinsci.plugins.workflow.job.WorkflowRun


// helper function to check whether a stage failed
@NonCPS
List getFailedStages(WorkflowRun run) {
    List failedStages = []
    FlowExecution exec = run.getExecution()
    PipelineNodeGraphVisitor visitor = new PipelineNodeGraphVisitor(run)
    def flowNodes = visitor.getPipelineNodes()

    for (node in flowNodes) {
        if (node.getType() != FlowNodeWrapper.NodeType.STAGE ) { continue; }
        String nodeName = node.getDisplayName()
        def nodeResult = node.getStatus().getResult()
        def resultFailure = io.jenkins.blueocean.rest.model.BlueRun$BlueRunResult.FAILURE
        if (nodeResult == resultFailure) {
            failedStages.add(nodeName)
        }
    }
    return failedStages
}


pipeline {
    agent any

    environment {
        PATH = "$WORKSPACE/miniconda/bin:$PATH"
        CORES = "28"
    }
    options {
        disableConcurrentBuilds()
        lock resource: 'building'
    }

    stages {
        stage('setup miniconda') {
            steps {
                sh '''#!/usr/bin/env bash
                wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -nv -O miniconda.sh > /dev/null
                bash miniconda.sh -b -p $WORKSPACE/miniconda > /dev/null
                conda config --set always_yes yes --set changeps1 no > /dev/null
                conda update -q conda  > /dev/null

                # add channels
                conda config --add channels defaults    > /dev/null
                conda config --add channels conda-forge > /dev/null
                conda config --add channels bioconda    > /dev/null

                # create snakemake-workflows env
                conda env create -f envs/snakemake-workflows.yaml > /dev/null
                '''
            }
        }
        stage('Test DAG') {
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                # Do some dry runs to test the DAG
                # test download workflow
                echo "download_default"
                snakemake -s workflows/download_fastq/Snakefile --directory workflows/download_fastq -n -j 48 --quiet

                # test alignment workflow
                # default config
                echo "alignment default"
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --quiet

                # test aligners
                echo "testing aligners"
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/bowtie2.yaml --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/bwa.yaml     --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/hisat2.yaml  --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/salmon.yaml  --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/star.yaml    --quiet

                # test sorting
                echo "testing sorting"
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/samtools_coordinate.yaml --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/samtools_queryname.yaml  --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/sambamba_coordinate.yaml --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/sambamba_queryname.yaml  --quiet

                # test atac-seq workflow
                # default config
                echo "default atac-seq"
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --quiet

                # test different peak callers
                echo "atac peakcaller"
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --configfile Jenkins/atac_seq/genrich.yaml       --quiet
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --configfile Jenkins/atac_seq/macs2.yaml         --quiet
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --configfile Jenkins/atac_seq/genrich_macs2.yaml --quiet

                # test different replicate settings
                echo "atac combine replicates"
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --config combine_replicates=fisher samples=../../Jenkins/atac_seq/samples.tsv --quiet
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --config combine_replicates=idr    samples=../../Jenkins/atac_seq/samples.tsv --quiet
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --config combine_replicates=merge  samples=../../Jenkins/atac_seq/samples.tsv --quiet

                # test rna-seq workflow
                # default config
                echo "default rna-seq"
                snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq -n -j 48 --quiet

                # test count matrix generation
                echo "counts matrix"
                snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq -n -j 48 --config aligner=star   --quiet
                snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq -n -j 48 --config aligner=salmon --quiet

                # test differential expression analysis
                echo "differential expression"
                snakemake -s workflows/rna_seq/Snakefile --directory workflows/rna_seq -n -j 48 --configfile Jenkins/rna_seq/deseq2.yaml --config samples=../../Jenkins/rna_seq/samples.tsv --quiet
                '''
            }
        }


        stage('Test downloading') {
            when {
                anyOf {
                    // always fully build develop and master
                    branch 'master'
                    branch 'develop'

                    // always run when jenkins, envs or configuration is changed
                    changeset 'Jenkins/*'
                    changeset 'envs/*'
                    changeset 'rules/configuration.smk'

                    // run when relevant rules are changed
                    changeset 'workflows/download_fastq/*'
                    changeset 'rules/get_fastq.smk'

                    // run when last time you failed
                    expression {
                        return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
                        .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test downloading")
                    }
                }
            }
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                # test basic downloading 1 PE and 1 SE
                snakemake -s workflows/download_fastq/Snakefile --directory workflows/download_fastq \
                --use-conda -j $CORES  --config samples=$WORKSPACE/Jenkins/download_fastq/samples.tsv
                '''
            }
        }
        stage('Test alignment') {
            when {
                anyOf {
                    // always fully build develop and master
                    branch 'master'
                    branch 'develop'

                    // always run when jenkins, envs or configuration is changed
                    changeset 'Jenkins/*'
                    changeset 'envs/*'
                    changeset 'rules/configuration.smk'

                    // run when relevant rules are changed
                    changeset 'workflows/alignment/*'
                    changeset 'rules/alignment.smk'
                    changeset 'rules/trimming.smk'
                    changeset 'rules/qc.smk'

                    // run when last time you failed
                    expression {
                        return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
                        .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test alignment")
                    }
                }
            }
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                # test bowtie2 alignment
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                --use-conda -j $CORES  --configfile Jenkins/alignment/bowtie2.yaml \
                --config samples=$WORKSPACE/Jenkins/alignment/samples.tsv

                # test bwa alignment
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                --use-conda -j $CORES  --configfile Jenkins/alignment/bwa.yaml \
                --config samples=$WORKSPACE/Jenkins/alignment/samples.tsv

                # test hisat2 alignment
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                --use-conda -j $CORES  --configfile Jenkins/alignment/hisat2.yaml \
                --config samples=$WORKSPACE/Jenkins/alignment/samples.tsv
#
#                # test salmon alignment
#                # TODO: fix #166
#                # TODO: for alignment + salmon + txi + deseq2:
#                # TODO: find small 2 small RNA-seq samples, the genome of which is also small, the gtf/gff contains genes, and is on Ensembl
#                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
#                --use-conda -j $CORES  --configfile Jenkins/alignment/salmon.yaml \
#                --config samples=$WORKSPACE/Jenkins/alignment/samples.tsv
#
#                # test star alignment
#                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
#                --use-conda -j $CORES  --configfile Jenkins/alignment/star.yaml \
#                --config samples=$WORKSPACE/Jenkins/alignment/samples.tsv
                '''
            }
        }
        stage('Test atac-seq') {
            when {
                anyOf {
                    // always fully build develop and master
                    branch 'master'
                    branch 'develop'

                    // always run when jenkins, envs or configuration is changed
                    changeset 'Jenkins/*'
                    changeset 'envs/*'
                    changeset 'rules/configuration.smk'

                    // run when relevant rules are changed
                    changeset 'workflows/atac_seq/*'
                    changeset 'rules/alignment.smk'
                    changeset 'rules/trimming.smk'
                    changeset 'rules/qc.smk'
                    changeset 'rules/merge_replicates.smk'
                    changeset 'rules/trackhub.smk'
                    changeset 'rules/call_peak.smk'

                    // run when last time you failed
                    expression {
                        return getFailedStages(Jenkins.instance.getItemByFullName("Snakemake-Workflows")\
                        .getItem("$GIT_BRANCH")._getRuns().last()).contains("Test atac-seq")
                    }
                }
            }
            steps {
                sh '''#!/usr/bin/env bash
                set -e
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                # test simple
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq \
                --use-conda -j $CORES  --configfile Jenkins/alignment/bowtie2.yaml \
                --config samples=$WORKSPACE/Jenkins/alignment/samples.tsv
                '''
            }
        }
//        stage('Test rna-seq') {
//            steps {
//                sh '''#!/usr/bin/env bash
//                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
//                conda activate miniconda/envs/snakemake-workflows/
//
//                # test deseq2
//                snakemake -s workflows/atac_seq/Snakefile --directory workflows/rna_seq \
//                --use-conda -j $CORES  --configfile Jenkins/rna_seq/deseq2.yaml \
//                --config samples=$WORKSPACE/Jenkins/rna_seq/samples.tsv
//                '''
//            }
//        }


    }

    post {
        always {
            dir("$WORKSPACE") {
                deleteDir()
            }
        }
    }
}
