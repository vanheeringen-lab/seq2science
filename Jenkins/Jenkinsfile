pipeline {
    agent any

    environment {
        PATH = "$WORKSPACE/miniconda/bin:$PATH"
        CORES = "28"
    }
    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('setup miniconda') {
            steps {
                sh '''#!/usr/bin/env bash
                wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -nv -O miniconda.sh > /dev/null
                bash miniconda.sh -b -p $WORKSPACE/miniconda > /dev/null
                conda config --set always_yes yes --set changeps1 no > /dev/null
                conda update -q conda  > /dev/null

                # add channels
                conda config --add channels defaults    > /dev/null
                conda config --add channels conda-forge > /dev/null
                conda config --add channels bioconda    > /dev/null

                # create snakemake-workflows env
                conda env create -f envs/snakemake-workflows.yaml > /dev/null
                '''
            }
        }
        stage('Test DAG') {
            steps {
                sh '''#!/usr/bin/env bash
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                # Do some dry runs to test the DAG
                # test download workflow
                echo "download_default"
                snakemake -s workflows/download_fastq/Snakefile --directory workflows/download_fastq -n -j 48 --quiet

                # test alignment workflow
                # default config
                echo "alignment default"
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --quiet

                # test aligners
                echo "testing aligners"
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/bowtie2.yaml --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/bwa.yaml     --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/hisat2.yaml  --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/salmon.yaml  --quiet

                # test sorting
                echo "testing sorting"
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/samtools_coordinate.yaml --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/samtools_queryname.yaml  --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/sambamba_coordinate.yaml --quiet
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment -n -j 48 --configfile Jenkins/alignment/sambamba_queryname.yaml  --quiet

                # test atac-seq workflow
                # default config
                echo "default atac-seq"
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --quiet

                # test different peak callers
                echo "atac peakcaller"
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --configfile Jenkins/atac_seq/genrich.yaml       --quiet
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --configfile Jenkins/atac_seq/macs2.yaml         --quiet
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --configfile Jenkins/atac_seq/genrich_macs2.yaml --quiet

                # test different replicate settings
                echo "atac combine replicates"
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --config combine_replicates=fisher samples=../../Jenkins/atac_seq/samples.tsv --quiet
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --config combine_replicates=idr    samples=../../Jenkins/atac_seq/samples.tsv --quiet
                snakemake -s workflows/atac_seq/Snakefile --directory workflows/atac_seq -n -j 48 --config combine_replicates=merge  samples=../../Jenkins/atac_seq/samples.tsv --quiet
                '''
            }
        }


        stage('Test downloading') {
//             when {
//                 anyOf {
//                     branch 'master' // always build master fully
//                     changeset 'Jenkins/Jenkinsfile'
//                     changeset 'Jenkins/download_fastq/*'
//                     changeset 'workflows/download_fastq/*'
//                     changeset 'rules/get_fastq.smk'
//                     changeset 'rules/configuration.smk'
//                     expression {
//                       return currentBuild.number == 1
//                     }
//                 }
//             }
            steps {
                sh '''#!/usr/bin/env bash
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                # test basic downloading 1 PE and 1 SE
                snakemake -s workflows/download_fastq/Snakefile --directory workflows/download_fastq \
                --use-conda -j $CORES  --config samples=$WORKSPACE/Jenkins/download_fastq/samples.tsv
                '''
            }
        }
        stage('Test alignment') {
            steps {
                sh '''#!/usr/bin/env bash
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate miniconda/envs/snakemake-workflows/

                # test bowtie2 alignment
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                --use-conda -j $CORES  --configfile Jenkins/alignment/bowtie2.yaml \
                --config samples=$WORKSPACE/Jenkins/alignment/samples.tsv

                # test bwa alignment
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                --use-conda -j $CORES  --configfile Jenkins/alignment/bwa.yaml \
                --config samples=$WORKSPACE/Jenkins/alignment/samples.tsv

                # test hisat2 alignment
                snakemake -s workflows/alignment/Snakefile --directory workflows/alignment \
                --use-conda -j $CORES  --configfile Jenkins/alignment/bwa.yaml \
                --config samples=$WORKSPACE/Jenkins/alignment/samples.tsv
                '''
            }
        }
    }

    post {
        always {
            dir("$WORKSPACE") {
                deleteDir()
            }
        }
    }
}
